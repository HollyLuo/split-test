package tree;

import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;


import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JFileChooser;

import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.Thread.UncaughtExceptionHandler;
import java.net.URL;
import java.awt.event.ActionEvent;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class MainWindow extends JFrame implements ThreadCompleteListener, UncaughtExceptionHandler{
	private String inputFile = null;

	private JPanel contentPane;
	private JTextField textField;
	private JTextField textFieldInput;
	private JButton buttonInput;
	private JButton buttonRun;
	private JTextArea textArea;
	private static NotifyingThread currentRunningAlgorithmThread = null;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MainWindow frame = new MainWindow();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public MainWindow() {
		setBounds(100, 100, 600, 450);
	    contentPane = new JPanel();
	    contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
	    setContentPane(contentPane);
	    contentPane.setLayout(null);
		
		JLabel lblChooseInputFile = new JLabel("Choose input file");
		lblChooseInputFile.setBounds(54, 27, 120, 14);
        contentPane.add(lblChooseInputFile);
        
        textFieldInput = new JTextField();
        textFieldInput.setEditable(false);
        textFieldInput.setBounds(204, 20, 238, 29);
        contentPane.add(textFieldInput);
        
        
        buttonInput = new JButton("...");
        buttonInput.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		askUserToChooseInputFile();
        	}
        });
        buttonInput.setBounds(466, 21, 55, 29);
        contentPane.add(buttonInput);
        
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setBounds(40, 95, 522, 316);
        contentPane.add(scrollPane);
        
        textArea = new JTextArea();
        scrollPane.setViewportView(textArea);
        System.setOut(new PrintStream(new TextAreaOutputStream(textArea)));

        
        buttonRun = new JButton("Run algorithm");
        buttonRun.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		processRunAlgorithmCommandFromGUI();
        	}
        });
        buttonRun.setBounds(250, 54, 117, 29);
        contentPane.add(buttonRun);
		
		
		
		
	}
	/**
	 * This method is called when the user click the "Run" or "Stop" button of the user interface,
	 * to launch the chosen algorithm and thereafter catch exception if one occurs.
	 */
	private void processRunAlgorithmCommandFromGUI() {
		// If a thread is already running (the user click on the stop Button
		if(currentRunningAlgorithmThread != null &&
				currentRunningAlgorithmThread.isAlive()) {
			// stop that thread
			currentRunningAlgorithmThread.stop();
			
			textArea.setText("Algorithm stopped. \n");
			buttonRun.setText("Run algorithm");
			return;
		}
		
		
		// Get the parameters
		
		textArea.setText("Algorithm is running...\n");
		
        
        buttonRun.setText("Stop algorithm");
       
        
		// RUN THE SELECTED ALGORITHM in a new thread
		// create a thread to execute the algorithm
		currentRunningAlgorithmThread = new NotifyingThread() {
			@Override
			public void doRun() throws Exception {
//				SplitBehaviorChain chain = new SplitBehaviorChain();
				float support = 0.2f;
				SplitBehaviorChain.runAlgorithm(inputFile,support);
			}
		};
		// The main thread will listen for the completion of the algorithm
		currentRunningAlgorithmThread.addListener(this);
		// The main thread will also listen for exception generated by the
		// algorithm.
		currentRunningAlgorithmThread.setUncaughtExceptionHandler(this);
		// Run the thread
		currentRunningAlgorithmThread.start();
	}
	
	static class TextAreaOutputStream extends OutputStream {

        JTextArea textArea;

        public TextAreaOutputStream(JTextArea textArea) {
            this.textArea = textArea;
        }

        public void flush() {
            textArea.repaint();
        }

        public void write(int b) {
            textArea.append(new String(new byte[]{(byte) b}));
        }
    }

	
	private void askUserToChooseInputFile() {
		try {
		    // WHEN THE USER CLICK TO CHOOSE THE INPUT FILE

		    File path;
		    // Get the last path used by the user, if there is one
		    String previousPath = PreferencesManager.getInstance().getInputFilePath();
		    if (previousPath == null) {
		        // If there is no previous path (first time user), 
		        // show the files in the "examples" package of
		        // the spmf distribution.
		    	
		        URL main = MainTest_saveToFile.class.getResource("MainTest_saveToFile.class");
		        if (!"file".equalsIgnoreCase(main.getProtocol())) {
		            path = null;
		        } else {
		            path = new File(main.getPath());
		        }
		    } else {
		        // Otherwise, the user used SPMF before, so
		        // we show the last path that he used.
		    	
		        path = new File(previousPath);
		    }

		    // Create a file chooser to let the user
		    // select the file.
		    final JFileChooser fc = new JFileChooser(path);
		    fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		    int returnVal = fc.showOpenDialog(MainWindow.this);

		    // if he chose a file
		    if (returnVal == JFileChooser.APPROVE_OPTION) {
		        File file = fc.getSelectedFile();
		        textFieldInput.setText(file.getName());
		        inputFile = file.getPath(); // remember the file he chose
		    }
		    // remember this folder for next time.
		    if (fc.getSelectedFile() != null) {
		        PreferencesManager.getInstance().setInputFilePath(fc.getSelectedFile().getParent());
		    }
		} catch (Exception e) {
		    JOptionPane.showMessageDialog(null,
		            "An error occured while opening the input file dialog. ERROR MESSAGE = " + e.toString(), "Error",
		            JOptionPane.ERROR_MESSAGE);
		}
	}
	
	/**
     * This method ask the user to choose the input file. This method is
     * called when the user click on the button to choose the input file.
     */
	private void askUserToChooseInputFile2() {
		try {
		    // WHEN THE USER CLICK TO CHOOSE THE INPUT FILE

		    File path;
		    // Get the last path used by the user, if there is one
//		    String previousPath = PreferencesManager.getInstance().getInputFilePath();
//		    if (previousPath == null) {
//		         If there is no previous path (first time user), 
//		         show the files in the "examples" package of
//		         the spmf distribution.
		    	
		        URL main = MainTest_saveToFile.class.getResource("MainTest_saveToFile.class");
		        if (!"file".equalsIgnoreCase(main.getProtocol())) {
		            path = null;
		        } else {
		            path = new File(main.getPath());
		        }
//		    } else {
//		        // Otherwise, the user used SPMF before, so
//		        // we show the last path that he used.
		    	
//		        path = new File(previousPath);
//		    }

		    // Create a file chooser to let the user
		    // select the file.
		    final JFileChooser fc = new JFileChooser(path);
		    fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
		    int returnVal = fc.showOpenDialog(MainWindow.this);

		    // if he chose a file
		    if (returnVal == JFileChooser.APPROVE_OPTION) {
		        File file = fc.getSelectedFile();
		        textFieldInput.setText(file.getName());
		        inputFile = file.getPath(); // remember the file he chose
		    }
		    // remember this folder for next time.
		    if (fc.getSelectedFile() != null) {
		        PreferencesManager.getInstance().setInputFilePath(fc.getSelectedFile().getParent());
		    }
		} catch (Exception e) {
		    JOptionPane.showMessageDialog(null,
		            "An error occured while opening the input file dialog. ERROR MESSAGE = " + e.toString(), "Error",
		            JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * This method receives the notifications when an algorithm launched by the
	 * user throw an exception
	 */
	@Override
	public void uncaughtException(Thread thread, Throwable e) {
		// If the thread just die because the user click on the "Stop algorithm" button
		if(e instanceof ThreadDeath) {
			// we just let the thread die.
		}
		else if(e instanceof NumberFormatException) {
			// if it is a number format exception, meaning that the user enter a string as a parameter instead
			// of an integer or double value.
			JOptionPane.showMessageDialog(null,
                    "Error. Please check the parameters of the algorithm.  The format for numbers is incorrect. \n"
                    + "\n ERROR MESSAGE = " + e.toString(), "Error",
                    JOptionPane.ERROR_MESSAGE);
		}else{
			// If another kind of error occurred while running the algorithm, show the error.
            JOptionPane.showMessageDialog(null,
                    "An error occurred while trying to run the algorithm. \n ERROR MESSAGE = " + e.toString(), "Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
		textArea.setText("");
	}

	/**
	 * This method receives a notifications when an algorithm terminates that
	 * was launched by the user by clicking "Run algorithm..."
	 */
	@Override
	public void notifyOfThreadComplete(Thread thread, boolean succeed) {

		buttonRun.setText("Run algorithm");
	}
}
